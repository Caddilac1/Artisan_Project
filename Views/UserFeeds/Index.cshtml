@model IEnumerable<ArtisanMarketplace.Models.UserFeed>

@{
    ViewData["Title"] = "Job Feed";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Page Header -->
<div class="mb-8">
    <div class="flex justify-between items-center">
        <div>
            <h1 class="text-3xl font-semibold text-gray-900 mb-2">Job Feed</h1>
            <p class="text-gray-600">Discover opportunities and projects from clients</p>
        </div>
        <a asp-action="Create" class="inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors shadow-sm">
            <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
            </svg>
            Create New Job
        </a>
    </div>
</div>

<!-- Filter Controls -->
<div class="mb-8">
    <div class="bg-white rounded-lg shadow-sm p-6">
        <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
            <!-- Search Bar -->
            <div class="flex-1 max-w-md">
                <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                        </svg>
                    </div>
                    <input type="text" id="searchInput" class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="Search jobs, categories, locations..." />
                </div>
            </div>

            <!-- Filter Options -->
            <div class="flex items-center space-x-4">
                <!-- Sort Dropdown -->
                <select id="sortSelect" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white">
                    <option value="newest">Newest First</option>
                    <option value="oldest">Oldest First</option>
                    <option value="budget-high">Budget: High to Low</option>
                    <option value="budget-low">Budget: Low to High</option>
                    <option value="popular">Most Popular</option>
                </select>

                <!-- Status Filter -->
                <select id="statusFilter" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white">
                    <option value="all">All Status</option>
                    <option value="active">Active</option>
                    <option value="pending">Pending</option>
                    <option value="completed">Completed</option>
                    <option value="cancelled">Cancelled</option>
                </select>

                <button id="resetFilters" class="text-blue-600 hover:text-blue-700 font-medium transition-colors px-4 py-2">
                    Reset
                </button>
            </div>
        </div>

        <!-- Category Tags -->
        <div class="mt-4 flex flex-wrap gap-2">
            <button class="category-filter active px-4 py-2 bg-blue-600 text-white text-sm rounded-full hover:bg-blue-700 transition-colors" data-category="all">All</button>
            <button class="category-filter px-4 py-2 bg-gray-100 text-gray-700 text-sm rounded-full hover:bg-gray-200 transition-colors" data-category="carpentry">Carpentry</button>
            <button class="category-filter px-4 py-2 bg-gray-100 text-gray-700 text-sm rounded-full hover:bg-gray-200 transition-colors" data-category="plumbing">Plumbing</button>
            <button class="category-filter px-4 py-2 bg-gray-100 text-gray-700 text-sm rounded-full hover:bg-gray-200 transition-colors" data-category="electrical">Electrical</button>
            <button class="category-filter px-4 py-2 bg-gray-100 text-gray-700 text-sm rounded-full hover:bg-gray-200 transition-colors" data-category="painting">Painting</button>
            <button class="category-filter px-4 py-2 bg-gray-100 text-gray-700 text-sm rounded-full hover:bg-gray-200 transition-colors" data-category="masonry">Masonry</button>
        </div>
    </div>
</div>

<!-- Main Content Grid -->
<div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
    <!-- Job Posts Feed -->
    <div class="lg:col-span-3">
        <div id="jobFeed" class="space-y-6">
            @if (Model != null && Model.Any())
            {
                @foreach (var item in Model)
                {
                    <article class="job-card bg-white rounded-lg shadow-sm overflow-hidden hover:shadow-md transition-shadow" 
                             data-category="@item.JobCategory" 
                             data-status="@item.Status"
                             data-budget="@item.BudgetRangeMax"
                             data-date="@item.CreatedAt.ToString("yyyy-MM-dd")">
                        <div class="p-6">
                            <!-- Header -->
                            <div class="flex items-start justify-between mb-4">
                                <div class="flex-1">
                                    <div class="flex items-center space-x-3 mb-2">
                                        @if (item.IsFeatured)
                                        {
                                            <span class="inline-flex px-3 py-1 bg-yellow-100 text-yellow-800 text-xs font-medium rounded-full">
                                                <svg class="h-3 w-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                                </svg>
                                                Featured
                                            </span>
                                        }
                                        @if (item.Priority == "High")
                                        {
                                            <span class="inline-flex px-3 py-1 bg-red-100 text-red-800 text-xs font-medium rounded-full">High Priority</span>
                                        }
                                        <span class="inline-flex px-3 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded-full">@item.JobCategory</span>
                                    </div>
                                    
                                    <h2 class="text-xl font-semibold text-gray-900 mb-2 hover:text-blue-600 transition-colors">
                                        <a asp-action="Details" asp-route-id="@item.Id">@item.Title</a>
                                    </h2>
                                    
                                    <p class="text-gray-600 mb-3 line-clamp-2">@item.Description</p>
                                </div>
                            </div>

                            <!-- Job Details -->
                            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4 p-4 bg-gray-50 rounded-lg">
                                <div>
                                    <p class="text-xs text-gray-500 mb-1">Budget Range</p>
                                    <p class="text-sm font-semibold text-gray-900">
                                        @if (item.BudgetRangeMin.HasValue && item.BudgetRangeMax.HasValue)
                                        {
                                            <text>$@item.BudgetRangeMin - $@item.BudgetRangeMax</text>
                                        }
                                        else
                                        {
                                            <text>Negotiable</text>
                                        }
                                    </p>
                                </div>
                                <div>
                                    <p class="text-xs text-gray-500 mb-1">Location</p>
                                    <p class="text-sm font-semibold text-gray-900">@(item.Location ?? "Remote")</p>
                                </div>
                                <div>
                                    <p class="text-xs text-gray-500 mb-1">Start Date</p>
                                    <p class="text-sm font-semibold text-gray-900">
                                        @(item.PreferredStartDate?.ToString("MMM dd") ?? "Flexible")
                                    </p>
                                </div>
                                <div>
                                    <p class="text-xs text-gray-500 mb-1">Deadline</p>
                                    <p class="text-sm font-semibold text-gray-900">
                                        @(item.Deadline?.ToString("MMM dd") ?? "Not set")
                                    </p>
                                </div>
                            </div>

                            <!-- Footer -->
                            <div class="flex items-center justify-between pt-4 border-t border-gray-200">
                                <div class="flex items-center space-x-4">
                                    <!-- Author Info -->
                                    <div class="flex items-center space-x-2">
                                        <div class="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center">
                                            <span class="text-sm font-medium text-blue-600">
                                                @(item.User?.Email?.Substring(0, 1).ToUpper() ?? "U")
                                            </span>
                                        </div>
                                        <span class="text-sm font-medium text-gray-700">@(item.User?.Email ?? "Anonymous")</span>
                                    </div>
                                    
                                    <!-- Stats -->
                                    <div class="flex items-center space-x-4 text-sm text-gray-500">
                                        <div class="flex items-center space-x-1">
                                            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
                                            </svg>
                                            <span>@item.ViewsCount</span>
                                        </div>
                                        <div class="flex items-center space-x-1">
                                            <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
                                            </svg>
                                            <span>@item.CommentsCount</span>
                                        </div>
                                        <span class="text-xs">@item.CreatedAt.ToString("MMM dd, yyyy")</span>
                                    </div>
                                </div>

                                <!-- Actions -->
                                <div class="flex items-center space-x-2">
                                    <a asp-action="Details" asp-route-id="@item.Id" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 transition-colors">
                                        View Details
                                    </a>
                                    <div class="relative">
                                        <button class="p-2 text-gray-400 hover:text-gray-600 rounded-full hover:bg-gray-100 transition-colors">
                                            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"/>
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </article>
                }
            }
            else
            {
                <div class="bg-white rounded-lg shadow-sm p-12 text-center">
                    <svg class="h-16 w-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                    </svg>
                    <h3 class="text-xl font-semibold text-gray-900 mb-2">No jobs available</h3>
                    <p class="text-gray-600 mb-4">There are currently no job postings. Check back soon!</p>
                    <a asp-action="Create" class="inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors">
                        Create First Job
                    </a>
                </div>
            }
        </div>

        <!-- Load More Button -->
        @if (Model != null && Model.Any())
        {
            <div class="text-center mt-8">
                <button id="loadMoreBtn" class="inline-flex items-center px-6 py-3 bg-white text-gray-700 font-medium rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors shadow-sm">
                    <svg class="h-5 w-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
                    </svg>
                    Load More Jobs
                </button>
            </div>
        }
    </div>

    <!-- Sidebar -->
    <div class="space-y-6">
        <!-- Statistics -->
        <div class="bg-white rounded-lg shadow-sm p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Overview</h3>
            <div class="space-y-4">
                <div class="flex items-center justify-between">
                    <span class="text-sm text-gray-600">Total Jobs</span>
                    <span class="text-lg font-semibold text-gray-900">@Model.Count()</span>
                </div>
                <div class="flex items-center justify-between">
                    <span class="text-sm text-gray-600">Active</span>
                    <span class="text-lg font-semibold text-green-600">@Model.Count(x => x.IsActive)</span>
                </div>
                <div class="flex items-center justify-between">
                    <span class="text-sm text-gray-600">Featured</span>
                    <span class="text-lg font-semibold text-yellow-600">@Model.Count(x => x.IsFeatured)</span>
                </div>
            </div>
        </div>

        <!-- Popular Categories -->
        <div class="bg-white rounded-lg shadow-sm p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Popular Categories</h3>
            <div class="space-y-3">
                @{
                    var categories = Model.GroupBy(x => x.JobCategory)
                                          .Select(g => new { Category = g.Key, Count = g.Count() })
                                          .OrderByDescending(x => x.Count)
                                          .Take(5);
                }
                @foreach (var cat in categories)
                {
                    var percentage = (double)cat.Count / Model.Count() * 100;
                    <div>
                        <div class="flex items-center justify-between mb-1">
                            <span class="text-sm text-gray-700">@cat.Category</span>
                            <span class="text-sm font-medium text-gray-900">@cat.Count jobs</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2">
                            <div class="bg-blue-600 h-2 rounded-full" style="width: @percentage%"></div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="bg-white rounded-lg shadow-sm p-6">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h3>
            <div class="space-y-2">
                <a asp-action="Create" class="block w-full text-center px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 transition-colors">
                    Post a Job
                </a>
                <button class="block w-full text-center px-4 py-2 bg-gray-100 text-gray-700 text-sm font-medium rounded-md hover:bg-gray-200 transition-colors">
                    View My Jobs
                </button>
                <button class="block w-full text-center px-4 py-2 bg-gray-100 text-gray-700 text-sm font-medium rounded-md hover:bg-gray-200 transition-colors">
                    Saved Jobs
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');
            const sortSelect = document.getElementById('sortSelect');
            const statusFilter = document.getElementById('statusFilter');
            const resetFilters = document.getElementById('resetFilters');
            const categoryFilters = document.querySelectorAll('.category-filter');
            const jobCards = document.querySelectorAll('.job-card');

            let currentCategory = 'all';
            let currentStatus = 'all';

            // Search functionality
            searchInput.addEventListener('input', function(e) {
                const searchTerm = e.target.value.toLowerCase();
                filterJobs();
            });

            // Category filter
            categoryFilters.forEach(btn => {
                btn.addEventListener('click', function() {
                    categoryFilters.forEach(b => {
                        b.classList.remove('active', 'bg-blue-600', 'text-white');
                        b.classList.add('bg-gray-100', 'text-gray-700');
                    });
                    this.classList.add('active', 'bg-blue-600', 'text-white');
                    this.classList.remove('bg-gray-100', 'text-gray-700');
                    
                    currentCategory = this.dataset.category;
                    filterJobs();
                });
            });

            // Status filter
            statusFilter.addEventListener('change', function() {
                currentStatus = this.value;
                filterJobs();
            });

            // Sort functionality
            sortSelect.addEventListener('change', function() {
                sortJobs(this.value);
            });

            // Reset filters
            resetFilters.addEventListener('click', function() {
                searchInput.value = '';
                sortSelect.value = 'newest';
                statusFilter.value = 'all';
                currentCategory = 'all';
                currentStatus = 'all';
                
                categoryFilters.forEach(b => {
                    b.classList.remove('active', 'bg-blue-600', 'text-white');
                    b.classList.add('bg-gray-100', 'text-gray-700');
                });
                categoryFilters[0].classList.add('active', 'bg-blue-600', 'text-white');
                categoryFilters[0].classList.remove('bg-gray-100', 'text-gray-700');
                
                filterJobs();
            });

            function filterJobs() {
                const searchTerm = searchInput.value.toLowerCase();
                
                jobCards.forEach(card => {
                    const category = card.dataset.category.toLowerCase();
                    const status = card.dataset.status.toLowerCase();
                    const text = card.textContent.toLowerCase();
                    
                    const matchesSearch = searchTerm === '' || text.includes(searchTerm);
                    const matchesCategory = currentCategory === 'all' || category === currentCategory;
                    const matchesStatus = currentStatus === 'all' || status === currentStatus;
                    
                    if (matchesSearch && matchesCategory && matchesStatus) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });
            }

            function sortJobs(sortType) {
                const jobFeed = document.getElementById('jobFeed');
                const cards = Array.from(jobCards);
                
                cards.sort((a, b) => {
                    switch(sortType) {
                        case 'newest':
                            return new Date(b.dataset.date) - new Date(a.dataset.date);
                        case 'oldest':
                            return new Date(a.dataset.date) - new Date(b.dataset.date);
                        case 'budget-high':
                            return parseInt(b.dataset.budget || 0) - parseInt(a.dataset.budget || 0);
                        case 'budget-low':
                            return parseInt(a.dataset.budget || 0) - parseInt(b.dataset.budget || 0);
                        default:
                            return 0;
                    }
                });
                
                cards.forEach(card => jobFeed.appendChild(card));
            }
        });
    </script>
}

<style>
    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
</style>